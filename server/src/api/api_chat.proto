syntax = "proto3";

package api.chat;


message None {}

/////////////////////////

message Message {
    enum ContentType {
        Unknown = 0;
        Text = 1;
        Image = 2;
        File = 3;
    };
    uint64 timestamp = 1;
    bytes content = 2;
    ContentType type = 3;
    uint64 sender_user_id = 6;
    string sender_user_name = 7;
    optional string file_name = 11;
}
message MessageList {
    repeated Message messages = 1;
}

message User {
    uint64 id = 1;
    string name = 2;
    optional bytes icon = 6;
    optional string description = 7;
}
message UserList {
    repeated User users = 1;
}

message UserCredentials {
    uint64 id = 1;
    string name = 2;
    string password = 7;
}
message UserCredentialsList {
    repeated UserCredentials users = 1;
}

message Chat {
    uint64 id = 1;
    string name = 2;
    bool is_group = 3;
    UserList members = 6;
    string description = 7;
}
message ChatList {
    repeated Chat chats = 1;
}

/////////////////////////


message FetchMessageListRequest {
    uint64 chat_id = 1;
}

message SendMessageRequest {
    Message message = 1;
    uint64 target = 2;
}

message CreateChatRequest {
    string name = 2;
    bool is_group = 3;
    UserList members = 6;
    string description = 7;
}


message DeleteChatRequest {
    uint64 target_chat_id = 2;
}

message GroupMemberManageOperation {
    enum ActionType {
        AddUser = 0;
        RemoveUser = 1;
        BanUser = 2;
        ChangePermission = 3;
    }
    ActionType action = 1;
    uint64 target_chat_id = 2;
    uint64 target_user_id = 3;

    optional int64 duration = 11;
    optional bool admin = 12;
}

message FriendManageOperation {
    enum ActionType {
        Add = 0;
        Remove = 1;
    }
    ActionType action = 1;
    uint64 user_id = 3;
    uint64 friend_id = 4;
}

service ChatService {

    rpc Login(UserCredentials) returns (None) {}

    rpc FetchChatList(None) returns (ChatList) {}
    rpc FetchMessageList(FetchMessageListRequest) returns (stream MessageList) {}

    rpc SendMessageTo(SendMessageRequest) returns (None) {}

    rpc CreateChat(CreateChatRequest) returns (None) {}
    rpc DeleteChat(DeleteChatRequest) returns (None) {}

    rpc ManageGroupMember(GroupMemberManageOperation) returns (None) {}

    rpc FetchFriendList(None) returns (UserList) {}
    rpc ManageFriend(FriendManageOperation) returns (None) {}
}

/////////////////////////
